import { type Express } from 'express';
import type { AppManifest } from '../../app/index.js';
import type { DirPath } from '../../dt/index.js';
import type { Configurable, EnvironmentManager, FSManager, Logger, LoggerSettings, SettingsManager } from '../../std/index.js';
import type { UCDef, UCHTTPContract, UCInput, UCManager, UCOPIBase } from '../../uc/index.js';
import { EntrypointsBuilder } from '../lib/server/EntrypointsBuilder.js';
import type { ServerManager, ServerManagerSettings } from '../lib/server/ServerManager.js';
import { AuthenticationCheckerMiddlewareBuilder } from './middlewares/AuthenticationCheckerMiddlewareBuilder.js';
import { ErrorMiddlewareBuilder } from './middlewares/ErrorMiddlewareBuilder.js';
import { HelmetMiddlewareBuilder } from './middlewares/HelmetMiddlewareBuilder.js';
import { PublicApiKeyCheckerMiddlewareBuilder } from './middlewares/PublicApiKeyCheckerMiddlewareBuilder.js';
import { RequestCheckerMiddlewareBuilder } from './middlewares/RequestCheckerMiddlewareBuilder.js';
import { RequestHandlerMiddlewareBuilder } from './middlewares/RequestHandlerMiddlewareBuilder.js';
import { RequestLoggerMiddlewareBuilder } from './middlewares/RequestLoggerMiddlewareBuilder.js';
type S = Pick<LoggerSettings, 'logger_level'> & Pick<ServerManagerSettings, 'server_binding_host' | 'server_binding_port' | 'server_ssl_fullchain_path' | 'server_ssl_key_path' | 'server_tmp_path'>;
export declare class NodeExpressServerManager implements Configurable<S>, ServerManager {
    private authenticationCheckerMB;
    private entrypointsBuilder;
    protected environmentManager: EnvironmentManager;
    private errorMB;
    private fsManager;
    private helmetMB;
    protected logger: Logger;
    private publicApiKeyCheckerMB;
    private requestCheckerMB;
    private requestHandlerMB;
    private requestLoggerMB;
    private settingsManager;
    private ucManager;
    protected runtime: Express;
    private server;
    constructor(authenticationCheckerMB: AuthenticationCheckerMiddlewareBuilder<any, any, any>, entrypointsBuilder: EntrypointsBuilder, environmentManager: EnvironmentManager, errorMB: ErrorMiddlewareBuilder, fsManager: FSManager, helmetMB: HelmetMiddlewareBuilder, logger: Logger, publicApiKeyCheckerMB: PublicApiKeyCheckerMiddlewareBuilder, requestCheckerMB: RequestCheckerMiddlewareBuilder, requestHandlerMB: RequestHandlerMiddlewareBuilder<any, any, any>, requestLoggerMB: RequestLoggerMiddlewareBuilder, settingsManager: SettingsManager<S>, ucManager: UCManager);
    s(): S;
    getRuntime(): Express;
    overrideUCManager(ucManager: UCManager): void;
    init(): Promise<void>;
    mount<I extends UCInput | undefined = undefined, OPI0 extends UCOPIBase | undefined = undefined, OPI1 extends UCOPIBase | undefined = undefined>(appManifest: AppManifest, ucd: UCDef<I, OPI0, OPI1>, contract: UCHTTPContract): Promise<void>;
    mountStaticDir(dirPath: DirPath): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    warmUp(): Promise<void>;
    private createServer;
}
export {};
