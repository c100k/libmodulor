import { type Express, type Request, type RequestHandler, type Response } from 'express';
import fileUpload from 'express-fileupload';
import type { AppManifest } from '../../../app/index.js';
import type { File } from '../../../dt/index.js';
import type { LoggerLevel } from '../../../std/index.js';
import type { UCDef, UCHTTPContract, UCInput, UCManager, UCOPIBase } from '../../../uc/index.js';
import type { ServerManagerSettings } from '../server/ServerManager.js';
import type { ServerRequestHandler, ServerRequestHandlerReq, ServerRequestHandlerRes } from '../server/ServerRequestHandler.js';
import type { HelmetMiddlewareBuilder } from './HelmetMiddlewareBuilder.js';
export declare function buildHandler<I extends UCInput | undefined = undefined, OPI0 extends UCOPIBase | undefined = undefined, OPI1 extends UCOPIBase | undefined = undefined>(appManifest: AppManifest, ucd: UCDef<I, OPI0, OPI1>, contract: UCHTTPContract, serverRequestHandler: ServerRequestHandler, ucManager: UCManager): RequestHandler;
export declare function init(helmetMB: HelmetMiddlewareBuilder, loggerLevel: LoggerLevel, serverTmpPath: ServerManagerSettings['server_tmp_path']): Express;
export declare function mountHandler(contract: UCHTTPContract, express: Express, handler: RequestHandler): void;
export declare function toFile(f: fileUpload.UploadedFile): File;
export declare function toReq(req: Request): ServerRequestHandlerReq;
export declare function toRes(res: Response): ServerRequestHandlerRes;
